# Spring Boot 애플리케이션 이름 설정
spring.application.name=Gayou_backend

# MySQL 데이터베이스 연결 정보 설정
spring.datasource.url=jdbc:mysql://${MYSQL_HOST:localhost:3306}/${MYSQL_DB:gayou}?allowPublicKeyRetrieval=true&useSSL=false
# 데이터베이스 사용자 이름과 비밀번호는 환경 변수로 설정 (보안 강화)
# MySQL 사용자 ID (환경 변수로 대체)
spring.datasource.username=${MYSQL_ID:root}
# MySQL 비밀번호 (환경 변수로 대체)
spring.datasource.password=${MYSQL_PW:root}
# MySQL 드라이버 클래스 설정
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# JPA 설정 - 데이터베이스 테이블을 애플리케이션 엔티티와 동기화 (필요할 경우 업데이트)
spring.jpa.hibernate.ddl-auto=update

# UTF-8 인코딩 설정 (애플리케이션의 기본 문자 인코딩을 UTF-8로 강제)
spring.servlet.encoding.charset=UTF-8
spring.servlet.encoding.enabled=true
spring.servlet.encoding.force=true

# JWT 토큰 비밀 키 설정 (환경 변수나 기본 값으로 설정)
# JWT 서명에 사용될 비밀 키
jwt.secret=${JWT_SECRET_KEY:f1403f1232a7e7f8d91318006b6c7fb97b4f51949bf9c206059f1a9fe8b51a24}

# 이메일 전송을 위한 설정 (Gmail SMTP 사용)
# 이메일 서버 호스트 (Gmail)
spring.mail.host=smtp.gmail.com
# SMTP 포트 (TLS 사용)
spring.mail.port=587
# 이메일 계정 사용자 이름 (환경 변수로 대체)
spring.mail.username=${EMAIL_NAME}
# 이메일 계정 비밀번호 (환경 변수로 대체)
spring.mail.password=${EMAIL_PASSWORD}
# SMTP 인증 사용
spring.mail.properties.mail.smtp.auth=true
# TLS를 통한 보안 연결 활성화
spring.mail.properties.mail.smtp.starttls.enable=true

# 카카오 REST API 키 (환경 변수로 대체)
kakao.rest.api.key=${KAKAO_REST_API_KEY}

# 카카오 REST API 키 (환경 변수로 대체)
cors.allowed.origins=${CORS_ALLOWED_ORIGINS}
